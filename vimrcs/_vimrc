" Vim Settings {
    " UI { 
        " allow plugins by file type (required for plugins!)
        filetype plugin on
        filetype indent on
        
        " syntax highlight on
        syntax on
        colorscheme desert

        " Fix vim takes a very long time to start up. https://stackoverflow.com/a/17719528
        set clipboard=exclude:.*

        set nocompatible                " no vi-compatible
        set linespace=0                 " No extra spaces between rows
        set number                      " Line numbers on
        set showmatch                   " Show matching brackets/parenthesis
        set incsearch                   " Find as you type search
        set hlsearch                    " Highlight search terms
        set winminheight=0              " Windows can be 0 line high
        set ignorecase                  " Case insensitive search
        set smartcase                   " Case sensitive when uc present
        set wildmenu                    " Show list instead of just completing

        " With a map leader it's possible to do extra key combinations
        let mapleader = ","
        let g:mapleader = ","
    " }

    " Formatting {
        set nowrap                      " Do not wrap long lines
        set autoindent                  " Indent at the same level of the previous line
        " C++, Groovy, Java, JavaScript, Perl, Python and Tcl indent. 
        "autocmd FileType cpp,groovy,java,javascript,perl,python,tcl,sh 
        "            \ setl sw=4 sts=4 et
        set shiftwidth=4                " Use indents of 4 spaces
        set expandtab                   " Tabs are spaces, not tabs
        set tabstop=4                   " An indentation every four columns
        set softtabstop=4               " Let backspace delete indent
        set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
        set splitright                  " Puts new vsplit windows to the right of the current
        set splitbelow                  " Puts new split windows to the bottom of the current
        set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)

        " groovy.vim support
        au BufNewFile,BufRead *.groovy setf groovy
        au BufNewFile,BufRead Jenkinsfile setf groovy
    " }
    
    " Tab {
        " Useful mappings for managing tabs
        map <leader>tn :tabnew<cr>
        map <leader>to :tabonly<cr>
        map <leader>tc :tabclose<cr>
        map <leader>tm :tabmove

        " Opens a new tab with the current buffer's path
        " Super useful when editing files in the same directory
        map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
    " }
    
    " VIMDIFF {
	if &diff
		map gs :call IwhiteToggle()<CR>
		function! IwhiteToggle()
			if &diffopt =~ 'iwhite'
				set diffopt-=iwhite
			else
				set diffopt+=iwhite
			endif
		endfunction
	endif 
    " }

    " Key Mappings {
        " Wrapped lines goes down/up to next row, rather than next line in file.
        noremap j gj
        noremap k gk

        " Allow saving of files as sudo when I forgot to start vim using sudo."
        cmap w!! w !sudo tee > /dev/null %

        " Map 'save' to ctrl-s, and first find out if you can configure your
        " xterm to pass Ctrl+S through to the application.
        :nmap <c-s> :w<CR>
        :imap <c-s> <Esc>:w<CR>a

        " Add quote around the word
        :nnoremap <Leader>q" ciw""<Esc>P
        :nnoremap <Leader>q' ciw''<Esc>P
        :nnoremap <Leader>qd daW"=substitute(@@,"'\\\|\"","","g")<CR>P"'")"'"

        " Format groovy indent (just like javascript indent)
        map <leader>gf :setf javascript<cr>gg=G:setf groovy<cr>

    " }
    " Misc {
        " Return to last edit position when opening files (You want this!)
        autocmd BufReadPost *
             \ if line("'\"") > 0 && line("'\"") <= line("$") |
             \   exe "normal! g`\"" |
             \ endif
        " Remember info about open buffers on close
        set viminfo^=%
    " }
" }

" Plugin Settings {
	" Ale {
		let g:ale_linters = {}
		let g:ale_linters.python = ['flake8']
		let g:ale_linters.javascript = ['eslint']
		let g:ale_linters.sh = ['shellcheck']

		let g:ale_fixers = {'*': ['remove_trailing_lines', 'trim_whitespace']}
		let g:ale_fixers.python = ['black', 'isort']
		let g:ale_fixers.javascript = ['prettier']
		let g:ale_fixers.scss = ['stylelint']
		let g:ale_fixers.css = ['stylelint']
		let g:ale_fixers.go = ['gofmt']

		" auto fix on save
		let g:ale_fix_on_save = 1
		" let g:ale_lint_on_save = 1
	" }
    
    " Nerdcommenter {
    "   Ctrl + / to to toggle comments like in vscode
        map <C-_> <plug>NERDCommenterToggle  
    " }
    
    " LeaderF {
        nnoremap <silent> <C-p> :Leaderf rg<CR>
    " }
" }
